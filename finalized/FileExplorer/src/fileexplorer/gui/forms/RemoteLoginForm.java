package fileexplorer.gui.forms;

import fileexplorer.handlers.fs.FileSystemHandler;
import fileexplorer.handlers.fs.RemoteFileSystemHandler;
import org.apache.commons.net.ftp.*;
import fileexplorer.handlers.shared.ActivityLogger;
import fileexplorer.handlers.shared.SystemResources;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class RemoteLoginForm extends javax.swing.JFrame {	
	private static ActivityLogger logger = ActivityLogger.getInstance();
	final private FTPClient ftpClient = new FTPClient();
	private RemoteFileSystemHandler remoteHandler;
	private String bookmarkedHostname;
	
	/**
	 * Creates new form RemoteLoginForm
	 */
	public RemoteLoginForm(final String bookmarkedHostname) {
		initComponents();
		this.bookmarkedHostname = bookmarkedHostname;
	}
	
	/**
	 * Selects the host name from the drop down, if present
	 * else creates a entry.
	 */
	private void selectHostname(final String hostnameString) {
		int idx = getComboBoxItemIndex(comboServerHostName, hostnameString);
//		System.out.printf("  // checking for host: %s, idx=%d\n", hostnameString, idx);
		if(idx == -1) // make new entry 
			comboServerHostName.addItem(hostnameString);
		else // select item
			comboServerHostName.setSelectedIndex(idx);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboUserType = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        chkAddToBookmark = new javax.swing.JCheckBox();
        btnLogin = new javax.swing.JButton();
        txtUserPassword = new javax.swing.JPasswordField();
        txtServerBookmarkName = new javax.swing.JTextField();
        lblServerBookmarkName = new javax.swing.JLabel();
        comboServerHostName = new javax.swing.JComboBox<>();
        comboUserName = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Remote server login");
        setAlwaysOnTop(true);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Address:");

        jLabel2.setText("User type:");

        comboUserType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Anonymous", "Registered" }));
        comboUserType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboUserTypeActionPerformed(evt);
            }
        });

        jLabel3.setText("Username:");

        jLabel4.setText("Password:");

        chkAddToBookmark.setText("Add to bookmark");
        chkAddToBookmark.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkAddToBookmarkActionPerformed(evt);
            }
        });

        btnLogin.setText("Log in");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        txtUserPassword.setEnabled(false);

        txtServerBookmarkName.setEnabled(false);

        lblServerBookmarkName.setText("Name:");
        lblServerBookmarkName.setEnabled(false);

        comboServerHostName.setEditable(true);
        comboServerHostName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboServerHostNameActionPerformed(evt);
            }
        });

        comboUserName.setEditable(true);
        comboUserName.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboServerHostName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboUserType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboUserName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtUserPassword)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(chkAddToBookmark)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(175, 175, 175)
                                .addComponent(btnLogin))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblServerBookmarkName, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtServerBookmarkName, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboServerHostName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUserPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkAddToBookmark)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtServerBookmarkName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblServerBookmarkName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLogin)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comboUserTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboUserTypeActionPerformed
        if(comboUserType.getSelectedIndex()==0) { // selected user as Anonymous
			comboUserName.setEnabled(false);
			txtUserPassword.setEnabled(false);			
		} else {
			comboUserName.setEnabled(true);
			txtUserPassword.setEnabled(true);
		}		
		loadUserNames();
    }//GEN-LAST:event_comboUserTypeActionPerformed

//	private String host, username, password, bookmarkName;
	
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
		final String host = comboServerHostName.getSelectedItem()==null? "" : comboServerHostName.getSelectedItem().toString().trim();
		final String username = comboUserName.getSelectedItem()==null ? "" : comboUserName.getSelectedItem().toString().trim();
		final String password = new String(txtUserPassword.getPassword()).trim();
		final String bookmarkName = chkAddToBookmark.isSelected() ? txtServerBookmarkName.getText().trim() : null;
		
		/* validating inputs */
		if(host.length()==0) {
			comboServerHostName.requestFocus();
			JOptionPane.showMessageDialog(	this,
											"Please enter a valid host address",
											"Invalid input",
											JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		if(username.length()==0) {
			comboUserName.requestFocus();
			JOptionPane.showMessageDialog(	this,
											"Please enter a valid username",
											"Invalid input",
											JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		if(chkAddToBookmark.isSelected() && bookmarkName.length()==0) {
			txtServerBookmarkName.requestFocus();
			JOptionPane.showMessageDialog(	this,
											"Please enter a valid bookmark name",
											"Invalid input",
											JOptionPane.ERROR_MESSAGE);
			return;
		}
		
		try {
			/* attempting to connect to remote server */
			remoteHandler = (RemoteFileSystemHandler)FileSystemHandler.getRemoteHandler(host, username, password);
			
			logger.logConfig("Connecting to remote server [host=%s, username=%s]...", host, username);
			remoteHandler.connect();
			logger.logConfig("Login successful to remote server %s as user '%s'", host, username);
			
			/* save this remote server profile to map & combo box */
			saveRemoteServerProfile(host, username);
			
			/* adding remote server to bookmark pane */
			if(chkAddToBookmark.isSelected()) {
				logger.logInfo("Adding remote server %s to bookmark pane...", host);
				SystemResources.formFileExplorer.bookmarkHandler.addRemoteServer(bookmarkName, host);
			}
			
			/* creating a new tab with server's root listing */
			addNewTab();
			
			/* close this window */
			dispose();
		} catch(IOException e) {
			JOptionPane.showMessageDialog(	this,
											"Cannot connect to remote server: " + host + 
													"\nReason: " + e,
											"Remote server connection failed",
											JOptionPane.ERROR_MESSAGE);
			logger.logSevere(e, "Remote server connection failed. Reason: %s", e);
		}
    }//GEN-LAST:event_btnLoginActionPerformed

	private void saveRemoteServerProfile(	final String host, 
											final String username) {
		/* saving to map */
		List<String> userNameList = SystemResources.prefs.remoteServerProfilesCacheMap.get(host);
		if(userNameList == null) {
			userNameList = new ArrayList<>();
			SystemResources.prefs.remoteServerProfilesCacheMap.put(host, userNameList);
		}
		
		if(!userNameList.contains(username) && !username.equals(SystemResources.ANONYMOUS_USERNAME))
			userNameList.add(username);
		
		/* adding to combo boxes */
		if(getComboBoxItemIndex(comboServerHostName, host) == -1) 
			comboServerHostName.addItem(host);
		
		if(!username.equals(SystemResources.ANONYMOUS_USERNAME)) {
			if(getComboBoxItemIndex(comboUserName, username) == -1) 
				comboUserName.addItem(username);
		}
	}
	
	private int getComboBoxItemIndex(final JComboBox<String> combo, final String item) {
		for(int i=0, len=combo.getItemCount(); i<len; i++)
			if(item.equals(combo.getItemAt(i)))
				return i;
		return -1;
	}
	
	private void addNewTab() {
		try {
			SystemResources.formFileExplorer.addNewTab(remoteHandler);
		} catch(Exception e) {
			JOptionPane.showMessageDialog(	this,
											"Cannot load directory listing of remote server " + 
													remoteHandler.getCurrentHostname() + ".\nReason: " + e,
											"Remote server operation failed",
											JOptionPane.ERROR_MESSAGE);
			logger.logSevere(e, "Cannot load directory listing of remote server %s. Reason: %s", 
					remoteHandler.getCurrentHostname(), e);
		}
	}
	
    private void chkAddToBookmarkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkAddToBookmarkActionPerformed
        lblServerBookmarkName.setEnabled(chkAddToBookmark.isSelected());
		txtServerBookmarkName.setEnabled(chkAddToBookmark.isSelected());
    }//GEN-LAST:event_chkAddToBookmarkActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
		SystemResources.formFileExplorer.setEnabled(false);
		
        /* load remote server profiles from preference map */
		comboUserName.addItem(SystemResources.ANONYMOUS_USERNAME);
		txtUserPassword.setText(SystemResources.ANONYMOUS_PASSWORD);
//		System.out.println("  // will load hostnames: " + SystemResources.prefs.remoteServerProfilesCacheMap.keySet());
		for(String hostString: SystemResources.prefs.remoteServerProfilesCacheMap.keySet()) {
//			System.out.println("  // host added: " + hostString);
			comboServerHostName.addItem(hostString);
		}
		
		if(bookmarkedHostname != null)
			selectHostname(bookmarkedHostname);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        SystemResources.formFileExplorer.setEnabled(true);
		SystemResources.formFileExplorer.formRemoteLogin = null;
		SystemResources.formFileExplorer.requestFocus();
    }//GEN-LAST:event_formWindowClosed

    private void comboServerHostNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboServerHostNameActionPerformed
        loadUserNames();
    }//GEN-LAST:event_comboServerHostNameActionPerformed

	private void loadUserNames() {
		if(comboUserType.getSelectedIndex()==0) { // selected user as Anonymous
			comboUserName.removeAllItems();
			comboUserName.addItem(SystemResources.ANONYMOUS_USERNAME);
			txtUserPassword.setText(SystemResources.ANONYMOUS_PASSWORD);
		} else {
			/* load the associated usernames from map */
			comboUserName.removeAllItems();
			String hostName = null;
			if(comboServerHostName.getSelectedItem() == null)
				return;
			hostName = comboServerHostName.getSelectedItem().toString().trim();
			if(hostName.length()==0) /* blank input */
				return;
			List<String> usernameList = SystemResources.prefs.remoteServerProfilesCacheMap.get(hostName);
			if(usernameList==null) /* new server host name */
				return;
//			System.out.printf("  // users to add for host=%s: %s\n", hostName, usernameList);			
			for(String usernameString: usernameList)
				comboUserName.addItem(usernameString);
		}
	}
	
//	private void logServerReply(final FTPClient ftpClient, final String hostName) {
//		String[] replies = ftpClient.getReplyStrings();
//        if (replies != null && replies.length > 0) {
//			for (String reply : replies)
//                logger.logConfig("Remote server (%s) reply: %s", hostName, reply);
//        }
//	}
//	
//	private void connectToServer(	final String hostName, 
//									final int port, 
//									final String userName, 
//									final String  password) 
//											throws IOException {
//		logger.logInfo("Connecting to remote server '%s'...", hostName);
//		ftpClient.connect(hostName, port);
//		logServerReply(ftpClient, hostName);
//		int replyCode = ftpClient.getReplyCode();
//
//		if (FTPReply.isPositiveCompletion(replyCode))
//			logger.logConfig("Connected to remote server: %s, reply code: %d", hostName, replyCode);
//		else
//			throw new IOException("Connection failed. (Server: " + hostName + ", Reply code:" + replyCode + ")");
//
//		logger.logConfig("Logging in to remote server %s...", hostName);
//		boolean success = ftpClient.login(userName, password);
//		logServerReply(ftpClient, hostName);
//		if (success)
//			logger.logConfig("Logged in to remote server: %s, user: '%s'", hostName, userName);
//		else
//			throw new IOException("Log in failed. (Server: " + hostName + ", username: '" + userName + 
//					"', reply code: " + ftpClient.getReplyCode() + ")");
//		
//		// use local passive mode to pass firewall
//		logger.logConfig("Entering local passive mode in remote server %s...", hostName);
//		ftpClient.enterLocalPassiveMode();
//		logger.logConfig("Entered local passive mode in remote server %s", hostName);
//	}
	
	private static RemoteLoginForm form = null;
	
	public static void init(final String bookmarkedHostname) {
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				SystemResources.formFileExplorer.formRemoteLogin = new RemoteLoginForm(bookmarkedHostname);
				SystemResources.formFileExplorer.formRemoteLogin.setVisible(true);
				logger.logInfo("RemoteLoginForm initialized");
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JCheckBox chkAddToBookmark;
    private javax.swing.JComboBox<String> comboServerHostName;
    private javax.swing.JComboBox<String> comboUserName;
    private javax.swing.JComboBox<String> comboUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblServerBookmarkName;
    private javax.swing.JTextField txtServerBookmarkName;
    private javax.swing.JPasswordField txtUserPassword;
    // End of variables declaration//GEN-END:variables
}
